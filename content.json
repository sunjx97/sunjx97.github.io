{"meta":{"title":"sunjx97's Blog","subtitle":"","description":"随手记录日常搞机折腾的二三事~","author":"sunjx97","url":"https://sunjx97.github.io","root":"/"},"pages":[{"title":"Hello World","date":"2022-03-21T06:50:28.457Z","updated":"2022-02-12T12:57:59.481Z","comments":false,"path":"about/index.html","permalink":"https://sunjx97.github.io/about/index.html","excerpt":"","text":""}],"posts":[{"title":"ipv6 环境下的家庭网络维护","slug":"ipv6 环境下的家庭网络维护","date":"2023-11-05T03:35:04.000Z","updated":"2025-07-09T10:26:50.442Z","comments":true,"path":"posts/266c2cf6/","link":"","permalink":"https://sunjx97.github.io/posts/266c2cf6/","excerpt":"千呼万唤始出来，ipv6 终于在我这边落地了。正好赶上周末，把家里相关的网络配置折腾一下吧（","text":"前言千呼万唤始出来，ipv6 终于在我这边落地了。正好赶上周末，就折腾了一下家中相关的网络配置，顺便加以记录。本人确实不大熟悉网络相关知识，如有错误请不吝指正。 路由器开启 ipv6ipv6 的常见地址段有： 全球单播地址（也就是公网地址）：2001::/16，电信的是 240e 开头，联通 2408 开头，移动 2409 开头。 局域网地址：fc、fd 开头，可路由。 链路本地地址：fe80 开头，不可路由，电脑自动生成。 ipv6 的发放模式ipv6 有三种分配模式： SLAAC Stateful DHCPv6 Stateless DHCPv6 因为是租房，光猫不在我控制范围内，分配到我路由器时已经是 /64 的地址了（悲），所以我这里使用 SLAAC 模式让光猫给下游设备分配 ipv6，根据 mac 随机生成后缀也相对更安全。 在我的 Openwrt 固件的图形管理页面有些配置没有，所以使用 ssh 远程到路由器，修改配置文件 /etc/config/dhcp 并重启。这里要将 lan 和 wan6 的 ra、dhcpv6、ndp 三项指定为 &#39;relay&#39;，即使用中继模式。 12345678910111213141516171819202122config dhcp &#x27;lan&#x27; option interface &#x27;lan&#x27; option start &#x27;100&#x27; option limit &#x27;150&#x27; option leasetime &#x27;12h&#x27; option dhcpv4 &#x27;server&#x27; option force &#x27;1&#x27; option ra &#x27;relay&#x27; option dhcpv6 &#x27;relay&#x27; option ndp &#x27;relay&#x27;config dhcp &#x27;wan&#x27; option interface &#x27;wan&#x27; option ignore &#x27;1&#x27;config dhcp &#x27;wan6&#x27; option interface &#x27;wan6&#x27; option ignore &#x27;1&#x27; option master &#x27;1&#x27; option ra &#x27;relay&#x27; option dhcpv6 &#x27;relay&#x27; option ndp &#x27;relay&#x27; ADGuard home 配置我开启 ipv6 主要是为了在 bt&#x2F;pt 时能获得更好的连接性，以及能在外访问家中的服务。当下 ipv6 建设并不完善，ipv6 优先的话有时会导致网速变慢和部分网页组件无法加载等问题，且 clash 对 ipv6 的支持并不好，所以我还是只使用 ipv4 的 dns 服务。 通过 设置 - DNS 设置 - DNS 服务配置 项，我们可以关闭 ipv6 地址解析。勾选禁用 IPv6 地址的解析即可。 docker 容器开启 ipv6相较于 docker 默认的 bridge 网络模式，macvlan 可以控制创建容器时的 ip 地址，方便我们针对 ip 地址进行更精细的操作。我们可以在 docker 中创建 macvlan 网络时添加参数，使之默认支持 ipv6。注：下文提及的所有 docker 容器均使用 macvlan 网络，且获得了独立的公网 ipv6 地址。 基本原理在创建 macvlan 时，只指定 ipv6 的局域网网段，但不配置 ipv6 网关。此时本 macvlan 网络创建的容器，其 ipv6 的公网地址和网关将通过 SLAAC 从路由器获得。 教程查看宿主机网卡名称打开安装 docker 的宿主机，先查询网卡&#x2F;接口名称。执行以下命令：ifconfig，结合 ip 地址，可以看到我这里的网卡名为 ens18。 创建 macvlan 网络执行以下命令创建 macvlan 网络： 1docker network create -d macvlan –ipv6 –subnet=【内网 v4 网段（CIDR）】 –gateway=【内网 v4 网关】 –subnet=fd00::/64 -o parent=【宿主机网卡名称】 【macvlan 网络名】 【内网 v4 网段（CIDR）】以 CIDR 格式。如内网为从 192.168.1.1 到 192.168.1.255，则写成这样的形式：192.168.0.0/24。 【内网 v4 网关】即你的内网网关，一般为路由器地址。 假定网关为 192.168.1.1，那么应写成： 1docker network create -d macvlan –ipv6 –subnet=192.168.0.0/24 –gateway=192.168.1.1 –subnet=fd00::/64 -o parent=ens18 test1br0 用该命令创建名为 test1br0 的 macvlan 网络，仅后所有用到该网络创建的 docker 容器都会有 ipv6 地址。 内网服务暴露ipv6 流量转发因为 ipv6 完全暴露到公网，所以默认情况下路由器会开启 ipv6 防火墙，只允许内部的设备向外访问 ipv6 地址，而不允许外部访问内部。像这样如果在 bt 时，两端都开启 ipv6 防火墙就寄了，防火墙阻隔了对方发起 ipv6 访问的请求。 所以我们要配置网关的 ipv6 防火墙，对相关流量进行放行。 Openwrt 防火墙进入 网络 - 防火墙 模块，我们可以设置 Openwrt 的防火墙。关于防火墙的详细配置可以参看这篇文章。 三个出入转发规则：当接口没有加入任何一个防火墙区域的时候，就遵循这个默认规则。这里的出入转发都是针对路由器而言： 入站：数据包发送给路由器 出站：数据包从路由器发出 转发：流量终点站不是路由器，只是经路由器中转转发 配置防火墙放行 ipv6 流量当前有两种针对 ipv6 流量的放行方式： 针对 ip 放行 针对端口放行 额外配置放行规则通过 网络 - 防火墙 - 通信规则，我们可以自定义相关的流量规则。 匹配固定 ipv6 后缀写法：::【需要暴露的主机的后缀】/::ffff:ffff:ffff:ffff 一般用于 dhcpv6 这种后缀固定且有规律的情况。如你的主机 ipv6 后缀为 d09，则目标地址应填写 ::d09/::ffff:ffff:ffff:ffff。 transmission公网 ipv6 对用于 bt&#x2F;pt 的 transmission 十分重要。我们可以通过开放相应端口的形式使之更好地利用 ipv6。 路由器防火墙配置我这里的 transmission 端口为 51413，所以开放所有针对 51413 端口的流量转发。这或许太过简单粗暴，也许会有安全隐患，但是胜在方便。 使用 Shadowsocks 访问内网因为我的 Shadowsocks 容器有独立的 ipv6 地址，所以无法通过常规的 ddns 手段更新 ipv6 地址。如果是 host 模式会简单很多。 ddns这里使用 Openwrt 自带的 ddns-go 来更新路由器 ipv6 地址。 选择你的 dns 服务商，填好相关信息。 这里之开启 ipv6 的 ddns 服务。如下选择好，等待更新。 端口转发选择 网络 - 端口转发，添加一条端口转发规则。将入站的端口为 9000 的 ipv6 流量转发给本地 Shadowsocks 对应的 ip 和端口。 路由器防火墙配置不知道为什么前面端口转发勾选的打开防火墙端口没有生效，所以这里在防火墙再开启一下相应端口的流量入站。 针对局域网内访问的优化ADGuard home 配置 DNS 重写因为关闭了 ipv6 的 dns 解析，我们这里设置 DNS 重写。在 过滤器 - DNS 重写 页面，可以很方便的添加一条规则，将所有访问对 Shadowsocks 节点域名的请求转发给内网的 Shadowsocks 服务。我使用泛域名统一转发给了 Nginx Proxy Mananger Nginx Proxy Mananger 转发流量因为我用泛域名将所有请求转发给了 Nginx Proxy Mananger，所以这里在 Nginx Proxy Mananger 多添加一条 Stream 的转发。因为我 Shadowsocks 服务的端口为 9000，所以我将 9000 端口的请求再转发到内网的 Shadowsocks 服务。 结语ipv6 还是前景可期的。虽然现在国内相关的建设还不完善，但当下也足够个人使用了。还是希望随着时间的推移，ipv6 推广也能顺利进展下去吧。 参考资料【原创】 通过openwrt的IPV6中继(也叫ipv6透传)，使后端设备获得原生ipv6公网地址unraid系统下macvlan网络的docker容器使用ipv6SLAAC 环境下的 IPv6 桥接与中继什么是CIDR？ - CIDR 块和表示法简介 - Amazon AWS关于家庭 ipv6 网络的“裸奔”问题之我见openwrt 防火墙解析超详细，多图，简单，OpenWRT IPV6 端口转发 SOCAT (个人记录)求助:ipv6端口转发IPv6 — 动态地址配置","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"transmission","slug":"transmission","permalink":"https://sunjx97.github.io/tags/transmission/"},{"name":"docker","slug":"docker","permalink":"https://sunjx97.github.io/tags/docker/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://sunjx97.github.io/tags/Shadowsocks/"},{"name":"Openwrt","slug":"Openwrt","permalink":"https://sunjx97.github.io/tags/Openwrt/"},{"name":"ipv6","slug":"ipv6","permalink":"https://sunjx97.github.io/tags/ipv6/"},{"name":"ddns","slug":"ddns","permalink":"https://sunjx97.github.io/tags/ddns/"},{"name":"防火墙","slug":"防火墙","permalink":"https://sunjx97.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"端口转发","slug":"端口转发","permalink":"https://sunjx97.github.io/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"}]},{"title":"使用 docker 搭建 vaultwarden 密码管理服务","slug":"使用 docker 搭建 vaultwarden 密码管理服务","date":"2022-07-11T11:22:22.000Z","updated":"2025-07-09T11:02:06.045Z","comments":true,"path":"posts/b3a0bacb/","link":"","permalink":"https://sunjx97.github.io/posts/b3a0bacb/","excerpt":"bitwarden 是一款优秀的自由开源密码管理软件，其覆盖多平台且支持自行部署。但由于官方版本过重，使用 rust 重写的第三方开源版 vaultwarden 更适合我们搭建使用——它运行更轻量，也能使用许多官方版本需要付费的功能。","text":"前言今天介绍一款密码管理软件 bitwarden。bitwarden 是一款优秀的自由开源密码管理软件，其覆盖多平台且支持自行部署。但由于官方版本过重，使用 rust 重写的第三方开源版 vaultwarden 更适合我们搭建使用——它运行更轻量，也能使用许多官方版本需要付费的功能。 服务端搭建流程使用 docker 搭建 vaultwarden使用以下命令搭建，注意替换掉 【你的ADMIN_TOKEN】 和 【数据目录】。 1docker run -d --name vaultwarden --restart unless-stopped --hostname vaultwarden -e ADMIN_TOKEN=【你的ADMIN_TOKEN】 -e WEBSOCKET_ENABLED=true -v 【数据目录】:/data/ -p 80:80 -p 3012:3012 vaultwarden/server:latest 详细设置参数可以在官方文档找到，参见这里。 设置 smtp 邮件通知进入 http://【容器ip】/admin（如容器ip为 192.168.10.5，则为 http://192.168.10.5/admin），输入之前配置的 【你的ADMIN_TOKEN】 进入管理页面 点开 SMTP Email Settings 模块，勾选 Enabled 打开，其余部分填入对应内容即可。此处以 QQ 邮箱为例。 如上，From Address 和 Username 填入邮箱地址，Password 为邮箱密码（或其他凭证，如 QQ 邮箱使用授权码），From Name 为发信人名称。 设置即时自动同步vaultwarden 默认可以定期自动同步，但间隔期可能导致多设备数据不一致，有时甚至会导致未同步信息被覆盖。好在如今，我们可以通过开启 WebSocket 来实现实时同步。 创建容器时的 WEBSOCKET_ENABLED=true 参数来开启 Websocket；如果使用反向代理，则要在反向代理里同步开启。 对服务进行反向代理因web页面强制要求使用 https 访问，建议使用反代套一层 https，此处使用 nginx proxy manager。 填写好 ip 和端口，打开 Websockets Support 和 Block Common Exploits，SSL 选择证书，打开 Force SSL，配置完成。 开始使用点击 Create Account 创建账号，此时的密码为账号的主密码。进入 Settings - Options，更改 Language 为中文即可。 注意！主密码非常重要！！Bitwarden 通过帐号和主密码经算法得到一个值，然后用这个值去加密用户的各个密码，最后储存在服务器上。而加密解密都需要在本地进行，也就是说，黑客即使攻破了服务器，仍无法破解密码数据库。这对我们的密码足够安全，但也意味着你一旦忘记主密码，你所有保存的密码将永远无法访问，所以——请谨慎保管主密码！ 功能介绍密码生成器不论是网页版还是客户端，我们都能很容易找到密码生成器，它可以帮我们生成满足要求的随机密码，这对于账号的安全性有很大的提升。 试试你的密码要多久才能被破解？——How Secure Is My Password 匹配模式bitwarden 匹配模式十分重要，它决定了你的账号密码何时自动填充到网页中，默认是 基础域 模式，可以根据自己需求适当调整。各个匹配模式摘录如下： 基础域选择基础域，当登录项目的 URI 值的顶级域名和第二级名与检测到的资源相匹配时，Bitwarden 将弹出提示以提供自动填充。例如，URI 的值为 https://google.com，使用基础域匹配检测： URL 自动填充？ http://google.com ✔︎ https://accounts.google.com ✔︎ https://google.net ✘ http://yahoo.com ✘ 主机选择主机，当登录项目的 URI 值的主机名和端口（若指定了）与检测到的资源相匹配时，Bitwarden 将弹出提示以提供自动填充。例如，URI 的值为https://sub.domain.com:4000，使用主机匹配检测： URL 自动填充？ http://sub.domain.com:4000 ✔︎ https://sub.domain.com:4000/page.html ✔︎ https://domain.com ✘ https://sub.domain.com ✘ https://sub2.sub.domain.com:4000 ✘ https://sub.domain.com:5000 ✘ 开始于选择开始于，当检测到的资源以登录项目的 URI 值开头（无论后面跟什么）时，Bitwarden 将弹出提示以提供自动填充。例如，URI 的值为https://sub.domain.com/path/，使用开始于匹配检测： URL 自动填充？ https://sub.domain.com/path/ ✔︎ https://sub.domain.com/path/page.html ✔︎ https://sub.domain.com ✘ https://sub.domain.com:4000/path/page.html（被端口阻断了） ✘ https://sub.domain.com/path（缺少斜杠） ✘ 正则表达式选择正则表达式，当检测到的资源与一个指定的正则表达式相匹配时，Bitwarden 将弹出提示以提供自动填充。正则表达式始终不区分大小写。 不安全示例URI 的值为^https://.*google\\.com$，使用正则表达式匹配检测： URL 自动填充？ https://google.com ✔︎ https://sub.google.com ✔︎ https://malicious-site.com?q=google.com ✔︎ http://google.com ✘ https://yahoo.com ✘ 这可能比预期的要匹配得更多。 安全示例URI 的值为^https://[a-z]+\\.wikipedia\\.org/w/index\\.php，使用正则表达式匹配检测： URL 自动填充？ https://en.wikipedia.org/w/index.php?title=Special:UserLogin&amp;returnto=Bitwarden ✔︎ https://pl.wikipedia.org/w/index.php?title=Specjalna:Zaloguj&amp;returnto=Bitwarden ✔︎ https://en.wikipedia.org/w/index.php ✔︎ https://malicious-site.com ✘ https://en.wikipedia.org/wiki/Bitwarden ✘ 精确选择精确，当登录项目的 URI 值与检测到的资源精确匹配时，Bitwarden 将弹出提示以提供自动填充。例如，URI 的值为https://www.google.com/page.html，使用精确匹配检测： URL 自动填充？ https://www.google.com/page.html ✔︎ http://www.google.com/page.html ✘ https://www.google.com/page.html?query=123 ✘ https://www.google.com ✘ 从不选择从不，Bitwarden 将从不为登录项目弹出以提供自动填充。 客户端配置接下来就是要自己的所有设备都能连接到密码库，并时刻更新密码了。此处以 chrome 扩展为例，其他客户端都大同小异，也就不多言了。 chrome 扩展设置在 chrome 应用商店搜索找到 bitwarden，添加并启用。点击左上角 设置 ，在 自托管环境 - 服务器URL 处填写自己的反代 url，回到主页就能登录了。 点开 设置 页，将 安全 - 密码库超时时间 设置为从不，这样比较方便不需要频繁输入密码解锁。 在 设置 页，找到 其他 - 选项 ，点击进入；找到 AUTOFILL，勾选自动填充。 结语到这里，本篇教程就已基本结束了。Bitwarden 是一款很强大的密码管理平台，本文也只简单介绍了部分基础内容。至于剩下更多功能，就留给各位自己发掘了~ 参考资料部署基于 Rust 的第三方 Bitwarden 服务端容器【保姆级教程】利用宝塔面板+Docker搭建一个优秀的密码管理器——BitwardenBitwarden的安装 – Wenhui’s Rotten PenURI 的使用 - Bitwarden 帮助中心中文版Home · dani-garcia_vaultwarden WikiBitwarden 帮助中心中文版","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://sunjx97.github.io/tags/docker/"},{"name":"密码管理","slug":"密码管理","permalink":"https://sunjx97.github.io/tags/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"vaultwarden","slug":"vaultwarden","permalink":"https://sunjx97.github.io/tags/vaultwarden/"},{"name":"bitwarden","slug":"bitwarden","permalink":"https://sunjx97.github.io/tags/bitwarden/"}]},{"title":"陕西广电光猫获取超管密码","slug":"陕西广电光猫获取超管密码","date":"2022-03-11T04:02:32.000Z","updated":"2025-07-09T10:49:38.628Z","comments":true,"path":"posts/96c33dc6/","link":"","permalink":"https://sunjx97.github.io/posts/96c33dc6/","excerpt":"主流的三大运营商（电信、联通、移动）获取光猫超管权限的资料在网上有很多，但如广电之流的破解方法却寥寥无几。如今终于找到了获取广电光猫超管密码的方法，在此分享给大家。","text":"前言主流的三大运营商（电信、联通、移动）获取光猫超管权限的资料在网上有很多，但如广电之流的破解方法却寥寥无几。如今终于找到了获取广电光猫超管密码的方法，在此分享给大家。 本次测试的机型为 HGU B1型家庭网关 型号: GL3100B1 固件版本: V3.0.16353 硬件版本: V20。 教程 使用普通账号密码登录陕西广电光猫后台（此处为 http://192.168.1.1/）。 访问 http://192.168.1.1/romfile.cfg 并下载 romfile.cfg 文件。 将 romfile.cfg 文件用 VS Code 打开（记事本也行）并查找 useradmin，web_passwd 值即为超级管理员密码（此处即为 5802，密码每个人都不一样，请自行获取）。 输入超管账号 useradmin 和密码 5802，可见已经登录到维护后台，接下来就愉快地折腾吧~ 参考资料如何破解光猫，获取超级管理员账户和密码","categories":[{"name":"家庭网络","slug":"家庭网络","permalink":"https://sunjx97.github.io/categories/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/"}],"tags":[{"name":"光猫","slug":"光猫","permalink":"https://sunjx97.github.io/tags/%E5%85%89%E7%8C%AB/"},{"name":"陕西广电","slug":"陕西广电","permalink":"https://sunjx97.github.io/tags/%E9%99%95%E8%A5%BF%E5%B9%BF%E7%94%B5/"}]},{"title":"使用 docker 搭建 webdav 应用","slug":"使用 docker 搭建 webdav 应用","date":"2022-02-19T04:16:46.000Z","updated":"2025-07-09T11:03:06.581Z","comments":true,"path":"posts/cb46f731/","link":"","permalink":"https://sunjx97.github.io/posts/cb46f731/","excerpt":"一直想搭建好 nas 的 webdav 服务，但网上大多数服务都不支持多用户，许多人推荐的 hacdias/webdav 项目也找不到详细的安装教程，也就一直搁置了。如今终于搭建成功，便把个人的搭建流程发出来，希望能帮到有需要的人。","text":"前言一直想搭建好 nas 的 webdav 服务，但网上大多数服务都不支持多用户，许多人推荐的 hacdias/webdav 项目也找不到详细的安装教程，也就一直搁置了。如今终于搭建成功，便把个人的搭建流程发出来，希望能帮到有需要的人。因为我也不大懂也就是刚跑起来，所以有问题的地方请大佬们轻喷 orz 更新历史20250707 鉴于 hacdias/webdav 项目更新，完善修正了部分内容。 搭建教程咱使用的是 hacdias 大佬的基于 Go 语言的 webdav，项目地址在这里。这里使用官方的 docker 镜像。 创建配置文件在准备好的目录（本例为 /docker/webdav）创建配置文件 config.yaml，填入以下内容。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111# 监听任意网卡，多网卡可指定对应ipaddress: 0.0.0.0port: 8081# TLS-related settings if you want to enable TLS directly.tls: falsecert: cert.pemkey: key.pem# Prefix to apply to the WebDAV path-ing. Default is &#x27;/&#x27;.prefix: /# Enable or disable debug logging. Default is &#x27;false&#x27;.debug: false# Disable sniffing the files to detect their content type. Default is &#x27;false&#x27;.noSniff: false# Whether the server runs behind a trusted proxy or not. When this is true,# the header X-Forwarded-For will be used for logging the remote addresses# of logging attempts (if available).behindProxy: true# The directory that will be able to be accessed by the users when connecting.# This directory will be used by users unless they have their own &#x27;directory&#x27; defined.# Default is &#x27;.&#x27; (current directory).directory: /data# The default permissions for users. This is a case insensitive option. Possible# permissions: C (Create), R (Read), U (Update), D (Delete). You can combine multiple# permissions. For example, to allow to read and create, set &quot;RC&quot;. Default is &quot;R&quot;.permissions: R# The default permissions rules for users. Default is none. Rules are applied# from last to first, that is, the first rule that matches the request, starting# from the end, will be applied to the request. Rule paths are always relative to# the user&#x27;s directory.rules: []# The behavior of redefining the rules for users. It can be:# - overwrite: when a user has rules defined, these will overwrite any global# rules already defined. That is, the global rules are not applicable to the# user.# - append: when a user has rules defined, these will be appended to the global# rules already defined. That is, for this user, their own specific rules will# be checked first, and then the global rules.# Default is &#x27;overwrite&#x27;.rulesBehavior: overwrite# Logging configurationlog: # Logging format (&#x27;console&#x27;, &#x27;json&#x27;). Default is &#x27;console&#x27;. format: console # Enable or disable colors. Default is &#x27;true&#x27;. Only applied if format is &#x27;console&#x27;. colors: true # Logging outputs. You can have more than one output. Default is only &#x27;stderr&#x27;. outputs: - stderr# CORS configurationcors: # Whether or not CORS configuration should be applied. Default is &#x27;false&#x27;. enabled: true credentials: true allowed_headers: - Depth allowed_hosts: - http://localhost:8080 allowed_methods: - GET exposed_headers: - Content-Length - Content-Range# The list of users. If the list is empty, then there will be no authentication.# Otherwise, basic authentication will automatically be configured.## If you&#x27;re delegating the authentication to a different service, you can proxy# the username using basic authentication, and then disable webdav&#x27;s password# check using the option:## noPassword: trueusers: # Example &#x27;admin&#x27; user with plaintext password. - username: admin password: admin # Example &#x27;john&#x27; user with bcrypt encrypted password, with custom directory. # You can generate a bcrypt-encrypted password by using the &#x27;webdav bcrypt&#x27; # command lint utility. - username: john password: &quot;&#123;bcrypt&#125;$2y$10$zEP6oofmXFeHaeMfBNLnP.DO8m.H.Mwhd24/TOX2MWLxAExXi4qgi&quot; directory: /another/path # Example user whose details will be picked up from the environment. - username: &quot;&#123;env&#125;ENV_USERNAME&quot; password: &quot;&#123;env&#125;ENV_PASSWORD&quot; - username: basic password: basic # Override default permissions. permissions: CRUD rules: # With this rule, the user CANNOT access &#123;user directory&#125;/some/files. - path: /some/file permissions: none # With this rule, the user CAN create, read, update and delete within # &#123;user directory&#125;/public/access. - path: /public/access/ permissions: CRUD # With this rule, the user CAN read and update all files ending with .js. # It uses a regular expression. - regex: &quot;^.+.js$&quot; permissions: RU 创建容器与多数 docker 容器创建相同，值得注意的是要将 config.yaml 所在目录映射进容器，并在启动参数指定 c 为容器内 config.yaml。 参考： 1docker run -d --name webdav-go -v /media:/data/media -v /docker/webdav:/config -p 8081:8081 --restart unless-stopped hacdias/webdav:latest -c /config/config.yaml 目录与端口映射将想要通过 webdav 访问的目录映射进容器内部 /data 目录，配置文件目录 /docker/webdav 映射到容器 /config 目录，端口 8081 映射到外部。 启动参数添加启动参数 -c /config/config.yaml。portainer-ce 安装要在 Advanced container settings - Command &amp; logging 设置，command 设置为 override 并填入参数。 可访问目录我们要将配置文件中 directory 设置为 /data，这样才能直接访问到我们想要共享的目录。默认为 .，此时会直接将项目根目录共享出去，这不是我们需要的。 多用户模板中支持对多个用户进行精细的权限控制（详见注释）。我只有一个人用，故只保留必要部分。对配置文件中 users 项进行修改： 12345users: - username: your_name # 访问 webdav 的用户名 password: your_password # 访问 webdav 的密码 directory: /data # 将 data 目录所有内容共享出来 permissions: CRUD # 对目录下文件拥有读写删改所有权限 反向代理如果想要使用 SSL 反代来更安全地使用，可以在配置文件将 behindProxy 设置为 true，在日志里就可以清晰看到访问的真实地址，否则只会是反代服务器所在的地址。 挂载 webdav推荐使用 RaiDrive 挂载 webdav 盘，2020.6.36 前的版本没有广告。有需求可自行反代。 参考资料hacdias&#x2F;webdav: Simple Go WebDAV server.记录一次NAS系统崩溃","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"webdav","slug":"webdav","permalink":"https://sunjx97.github.io/tags/webdav/"},{"name":"docker","slug":"docker","permalink":"https://sunjx97.github.io/tags/docker/"}]},{"title":"使用 frp 和 Shadowsocks 实现安全访问内网服务","slug":"使用 frp 和 shadowsocks 实现安全访问内网服务","date":"2022-02-16T11:19:23.000Z","updated":"2025-07-09T10:21:28.169Z","comments":true,"path":"posts/264d1c83/","link":"","permalink":"https://sunjx97.github.io/posts/264d1c83/","excerpt":"初期自建服务器进度完成后，第二步便是实现外网对内网服务的访问（不然岂不是太过鸡肋w)。但苦于总是找不到个万全的方法，因而一直处于搁置状态。如今看到 b 站 @靛青K 大佬通过 ss 实现内网服务安全访问的方法，咱灵光一闪，想到通过 frp 解决没有公网 ip 问题，进而通过 ss 实现内网安全访问的思路，于是便有了这篇文章——","text":"前言初期自建服务器进度完成后，第二步便是实现外网对内网服务的访问（不然岂不是太过鸡肋w)。但苦于没有公网 ip，传统内网穿透（如 frp）把自身服务公开到公网又觉得太不安全，zerotier 虚拟局域网又要频繁切换 vpn 很不方便，总是找不到个万全的方法，因而一直处于搁置状态。如今看到 b 站@靛青K大佬通过 ss 实现内网服务安全访问的方法，咱灵光一闪，想到通过 frp 解决没有公网 ip 问题，进而通过 ss 实现内网安全访问的思路，于是便有了这篇文章—— 主体思路通过 clash 实现基于域名的分流，当匹配到特定域名后缀后将流量发往 ss 服务端，ss 服务端通过 frp 实现内网穿透，从而实现安全而又便捷的内网访问功能。相较于传统公网 ip 和 frp 在公网暴露服务的风险隐患，本方法只允许知晓 ss 账号的人通过 ss 访问内网服务，而相对于 zerotier 则连通性更好，还免去了 zerotier 和 clash 不能共存的麻烦，方便很多。 流量整体转发路径如下外网访问 =&gt; clash规则匹配分流（ss客户端） =&gt; frps =&gt; frpc =&gt; ss服务端 =&gt; （ADGuard Home 自建DNS） =&gt; 反向代理服务器 =&gt; 目标服务 Shadowsocks 服务端搭建本人使用 Shadowsocks-rust 版本，通过 docker 安装。其中【宿主机地址】替换为本地保存 ss 配置文件的目录。 1docker run -d -p 9000:9000 -p 9000:9000/udp --name shadowsocks-rust --restart=always -v 【宿主机目录】:/etc/shadowsocks-rust teddysun/shadowsocks-rust 在【宿主机目录】下新建 config.json 文件，内容如下。password0 替换为你的密码，键 dns 的值 192.168.1.1 替换为你的 dns 服务器地址。 method 的值 aes-256-gcm 换为你的加密方式（用咱这个就行，不用动）。 1234567&quot;server&quot;:&quot;0.0.0.0&quot;,&quot;server_port&quot;:9000,&quot;password&quot;:&quot;password0&quot;,&quot;timeout&quot;:300,&quot;method&quot;:&quot;aes-256-gcm&quot;,&quot;dns&quot;:&quot;192.168.1.1&quot;,&quot;mode&quot;:&quot;tcp_and_udp&quot; 重启 shadowsocks-rust 服务，ss 服务端设置完成。 使用frp实现内网穿透建立frp隧道推荐使用 SAKURA FRP 提供的免费内网穿透服务，普通用户能通过签到每日免费获取流量，内网服务的简单访问足够了（大流量或对网络要求更高的用户请自行购买流量包和 VIP）。 （申请账号后）登录进入主面版，点击 穿透 - 节点状态 查看所有节点。免费用户节点有限，挑个能用的国内节点就行。 转到 用户 - 用户信息 - 账号信息 处，找到访问密钥，记录备用。 通过 id（上面节点 # 后即为 id）选取节点，转到 穿透 - 隧道列表 - 新建隧道 创建隧道。选择穿透节点，tcp、udp 隧道各创建一个。隧道名随意设置，本地 ip 为 ss服务器ip，本地端口均为 9000（与上面ss的配置文件一致），穿透节点、远程端口均一致，开启压缩和加密。 创建完成后，在隧道列表页获取隧道id。 点其中一条隧道最后三个点（操作 项），选择配置文件，找到 [common] 下 server_addr 项，复制 frp 服务器地址备用。 通过docker安装frpc因为使用的是 SAKURA FRP 提供的服务，所以这里不能使用官方版 frpc，应在 dockerhub 拉取 natfrp/frpc 镜像。 注意不同于官方 frpc，natfrp 使用用户密钥和隧道 id 拉取配置文件，所以要设置启动参数。格式为 &lt;启动密钥&gt;:&lt;隧道ID1&gt;,隧道ID2,隧道ID3,...，其中启动密钥即上一步的访问密钥，隧道 id 即上一步的两个隧道 id。 使用命令行安装如下： 1docker run -d --name frpc-natfrp --restart=always natfrp/frpc -f &lt;启动参数&gt; 使用 portainer-ce 安装也可，值得注意的是运行时参数设置在 Advanced container settings - Command &amp; logging 设置，command 设置为 override 并填入参数，如下图。 clash根据规则分流我使用 subconverter 生成包含自定义规则的配置文件，subconverter 可以自己搭建也能用别人搭好的，这里推荐一个ACL4SSR 在线订阅转换。远程配置使用自己的配置文件模板（可以参考大佬的模板），在ruleset和proxy_group对应添加节点和规则。配置完成后转换合并订阅即可。 subconverter 配置文件模板subconverter 可以通过设置远程配置实现定制自己需要的规则分流。咱这里使用 GitHub 存储远程配置文件。这里推荐直接复制大佬的模板，然后在此基础上修改。 推荐几个基础模板：ACL4SSR_Online 默认版 分组比较全(与Github同步)ACL4SSR_Online_Full 全分组 重度用户使用(与Github同步) subconverter 订阅转换设置细则可参考官方使用文档，这里只讲本教程需要的内容。 Github 创建仓库（注册并）登录 Github，创建仓库，创建远程配置文件 config.ini。这里太过简单直接跳过罢 ruleset 设置咱这里使用 GitHub 保存规则文件，同仓库下创建 ruleset.list，填入要匹配的的域名或 ip。具体规则在这里。我们这里直接填 DOMAIN-SUFFIX,your-domain.com，将 your-domain.com 替换为你的域名，此行意为以 your-domain.com 为后缀的域名被匹配。最后保存，点击 Raw 获得真实地址。 复制大佬的配置模板，在配置模板中增加以下一行，= 后面替换为你的 proxy_group 名称 + 规则地址。proxy_group 和 ruleset 名称必须完全一致，否则会报错。注意，规则从上往下匹配，所以最好添加到一列 ruleset 的最上方。 1ruleset=🏠 家庭内网,https://raw.githubusercontent.com/your_account/your_project/main/rulesets/ruleset.list 该条的含义是：从 ruleset.list 拉取规则，并将匹配到的流量使用 🏠 家庭内网 中选中的节点转发。 proxy_group 设置在配置模板中增加以下一行，将 GROUPID=1 的 1 换成自己订阅链接或节点的序号（序号从 0 开始计算）。 1custom_proxy_group=🏠 家庭内网`select`!!GROUPID=1`[]DIRECT`http://www.gstatic.com/generate_204`60,5,50 该条的含义是：创建一个名为 🏠 家庭内网 的代理组，使用 select 模式，添加第 2 条订阅和 DIRECT 到该节点组，延迟测速周期 60 秒，5 秒未响应即为超时，延迟容差为 50ms。 获取远程配置地址以上两处修改完成后，GitHub 创建的远程配置文件页点击Raw获取真实地址。 Shadowsocks 节点链接生成一般使用的 ss 链接都经过了 base64 加密，我们这里先生成未加密的节点链接，再加密。 获得未加密的ss链接模板：method:password@hostname:port。 method 是你的 ss 的加密方式，password 是上面设置的密码，hostname 和 port 是上面 frp 服务的地址和远程端口，分别替换对应内容。替换后示例 aes-256-gcm:barfoo@hostname:8388。 通过base64加密获得ss链接通过这里可以便捷地实现 base64 加密，然后加上 ss:// 大功告成，可以额外添加 #节点名称 来给自己的 ss 节点命名。 通过 subconverter 生成全新订阅使用推荐的ACL4SSR 在线订阅转换生成全新订阅。在订阅链接处按次序填好机场订阅链接和 ss 链接，在订阅转换的远程配置处粘贴上面得到的远程配置地址，点生成订阅链接即可。 DNS 服务器设置这里使用 ADGuard Home 做 DNS 服务，ADGuard Home 的 DNS 重写可以看作自定义 hosts 功能。选择 过滤器 - DNS 重写，添加 DNS 重写，ip 为反向代理服务器的 ip。ADGuard Home 这里支持泛域名，好评！ 内网流量转发设置现在，你已经可以实现外网访问本地内网服务了。但内网设备 clash 也会绕这么大一圈来访问内网服务，这不符合我们的初衷。这就需要我们对内网流量转发做额外设置， DNS 服务器设置我们在 DNS 重写中，添加域名为 frp 服务器的域名，ip 为反代服务器的 ip。 反代设置 Streams 流量转发这里通过 Nginx Proxy Manager 设置，没有搭建的同学可以查看咱之前的搭建教程：使用 docker 搭建 nginx proxy manager 实现反向代理和 SSL 证书申请。 Nginx 的 Stream 模块工作在第四层，我们可以用来转发 tcp、udp 数据包。登录管理页面，点击 Streams - Add Stream，Incoming Port 填 frp 隧道的远程端口，Forward Host 填 ss 服务端的 ip，Forward Port 填 ss 服务端的端口（即上面设置的9000）。 设置完毕，此时如果我们回到家里，也不用手动切换为 DIRECT，访问内网服务的数据会自动导向反代服务器，进而转发到 ss 服务回到内网，无需担心浪费frp 的流量。 结语至此，本教程终于结束了。对于内外网两栖的设备在节点组需要选择自己的 ss 节点，而内网设备直接选择 DIRECT 即可，DNS 和反代服务器会将流量转发到正确的服务 ip 和端口。相对于 @靛青K 大佬直接使用 ddns 和公网 ip 搭建 ss 服务端，这个方法肯定麻烦许多，但对于当前 ipv6 未全面铺开的情况和大内网的我来说，终归是够用了。所以 ipv6 时代什么时候来啊 (#&#96;O′)&#x2F; 参考资料使用 Shadowsocks 访问家庭内网使用 docker 管理 frpc 运行 - SAKURA FRPsubconverter 官方使用文档规则编辑 - Clash for Windowsshadowsocks 生成二维码 URIURI与二维码 - shadowsocks-libev","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"内网穿透","slug":"内网穿透","permalink":"https://sunjx97.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"frp","slug":"frp","permalink":"https://sunjx97.github.io/tags/frp/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://sunjx97.github.io/tags/Shadowsocks/"}]},{"title":"解决 transmission 使用网络共享的监控目录时的监控失灵问题","slug":"解决 transmission 使用网络共享的监控目录时的监控失灵问题","date":"2022-01-07T15:11:08.000Z","updated":"2025-07-09T10:57:25.113Z","comments":true,"path":"posts/7133bd05/","link":"","permalink":"https://sunjx97.github.io/posts/7133bd05/","excerpt":"Linux 下使用 transmission 时，其监控文件夹功能会在监控 smb 共享文件夹时失效。","text":"前言transmission 可以通过设置 watch 监控文件夹来自动添加监控目录内的种子，但如果监控文件夹是 smb 共享，则会出现失灵的现象（即只在开启或重启时添加一次目录内的种子）。本人使用 NAS 集中管理自己的数据，docker 版 transmission 也是映射的主机挂载的 smb 共享文件夹，便出现了日常使用不自动添加种子的问题。 问题原因transmission 在 Linux 下默认使用 inotify 监控监控目录，而 inotify 不对 cifs 共享有效。 解决方案在配置文件目录的 settings.json 加入下行即可。 1&quot;watch-dir-force-generic&quot;: true, 参考资料Watch-dir on network folder","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"transmission","slug":"transmission","permalink":"https://sunjx97.github.io/tags/transmission/"},{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/tags/pt/"},{"name":"smb","slug":"smb","permalink":"https://sunjx97.github.io/tags/smb/"}]},{"title":"解决通过 fstab 开机挂载 smb 文件夹导致的 Database is locked 问题","slug":"解决通过 fstab 开机挂载 smb 文件夹导致的 Database-is-locked 问题","date":"2022-01-04T05:38:54.000Z","updated":"2025-07-09T10:59:50.041Z","comments":true,"path":"posts/cbb0bc9e/","link":"","permalink":"https://sunjx97.github.io/posts/cbb0bc9e/","excerpt":"发现在使用 fstab 开机挂载时，使用 sqlite 的数据库，有时会导致 Database is locked 问题，这时需要通过添加参数来解决。","text":"前言发现在使用 fstab 开机挂载的 smb 文件夹会有 Database is locked 的问题，如通过 docker 安装的 nginx-proxy-manager 和 qiandao，映射的文件夹是 smb（cifs）共享挂载的，因为默认使用了 sqlite 的数据库，会导致 Database is locked 问题，如下图： 解决方案在挂载时加入 nolock 参数即可。 1//myserver /mymount cifs username=**,password=**,nolock,uid=1000,gid=1000 参考资料Database is locked","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"docker","slug":"docker","permalink":"https://sunjx97.github.io/tags/docker/"},{"name":"smb","slug":"smb","permalink":"https://sunjx97.github.io/tags/smb/"},{"name":"sqlite","slug":"sqlite","permalink":"https://sunjx97.github.io/tags/sqlite/"}]},{"title":"蜗牛星际 A 款机箱的六盘位改造","slug":"蜗牛星际 A 款机箱的六盘位改造","date":"2022-01-01T12:46:11.000Z","updated":"2025-07-09T11:06:48.332Z","comments":true,"path":"posts/b040efc9/","link":"","permalink":"https://sunjx97.github.io/posts/b040efc9/","excerpt":"蜗牛星际 A 款机箱改造 6 盘位（4 个 3.5 寸盘位 + 2 个 2.5 寸盘位）","text":"前言距离改造已经过去很久了，直到现在才发出来_(:3」∠)_ 教程因为蜗牛星际A款机箱本来就带一个 2.5 寸硬盘位（机箱内部），所以只要再扩展出一个 2.5 寸硬盘位即可。 用到了一个 2.5 寸硬盘支架，购买链接在这里，购买半高 PCIe 款。 使用的螺丝购买链接在这里，规格为 M3，建议买短点。 先用四个螺丝将支架和硬盘固定（硬盘有一面有四个螺丝孔），我这边买的螺丝比较长，所以用螺母当垫片使用。 因为螺丝本身有厚度，所以支架最底下那个盘位要空出来，直接在第二个盘位安装 2.5 寸硬盘即可。 成品如图： 大概只能扩充到 2 个 2.5 寸盘位，毕竟离机箱壁太近了。 注意事项机箱内部的 2.5 寸盘位因为要将 4 个螺丝孔那面对外，所以对硬盘厚度有要求，建议厚盘装在外面。","categories":[{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/categories/DIY/"}],"tags":[{"name":"蜗牛星际","slug":"蜗牛星际","permalink":"https://sunjx97.github.io/tags/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85/"},{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/tags/DIY/"}]},{"title":"使用 docker 搭建 nginx proxy manager 实现反向代理和 SSL 证书申请","slug":"使用 docker 搭建 nginx-proxy-manager 实现反向代理和 SSL 证书申请","date":"2022-01-01T03:12:37.000Z","updated":"2025-07-09T10:47:32.359Z","comments":true,"path":"posts/233f7ebd/","link":"","permalink":"https://sunjx97.github.io/posts/233f7ebd/","excerpt":"自从入坑 NAS 以来，（黑）群晖一直都是我文件存储管理的得力助手。但随着我的学习和理解不断加深，黑裙已不能满足我的需求。如今，是时候告别（黑）群晖，往更专业的自建服务器方向发展了。其中关键的一步，便是找到能方便替换群晖反向代理服务的开源项目，而 nginx proxy manager 给了我一个很好的选择。","text":"前言自从入坑 NAS 以来，（黑）群晖一直都是我文件存储管理的得力助手。但随着我的圈内吹水日益熟练学习和理解不断加深，黑裙已不能满足我的需求。如今，是时候告别（黑）群晖，往更专业的自建服务器方向发展了。其中关键的一步，便是找到能方便替换群晖反向代理服务的开源项目，而 nginx proxy manager 给了我一个很好的选择。 nginx proxy manager 介绍nginx proxy manager 能让我们轻松地转发到在家里或其他地方运行的网站，包括免费的 SSL，而不需要对 Nginx 或 Letsencrypt 了解太多。便捷直观的 web 页面管理和操作无疑大大简化了一般 nginx 反代服务的步骤。 docker 安装 nginx proxy manager推荐使用 docker-compose 安装 12345678910111213141516171819202122232425version: &quot;3&quot;services: app: image: &#x27;jc21/nginx-proxy-manager:latest&#x27; restart: unless-stopped ports: # These ports are in format &lt;host-port&gt;:&lt;container-port&gt; - &#x27;80:80&#x27; # Public HTTP Port - &#x27;443:443&#x27; # Public HTTPS Port - &#x27;81:81&#x27; # Admin Web Port # Add any other Stream port you want to expose # - &#x27;21:21&#x27; # FTP # Uncomment the next line if you uncomment anything in the section # environment: # Uncomment this if you want to change the location of # the SQLite DB file within the container # DB_SQLITE_FILE: &quot;/data/database.sqlite&quot; # Uncomment this if IPv6 is not enabled on your host # DISABLE_IPV6: &#x27;true&#x27; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt 浏览器输入【docker主机ip:81】，成功进入 web 页面，初次登录使用邮箱：&#x61;&#x64;&#x6d;&#x69;&#x6e;&#x40;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#99;&#111;&#109;，密码：changeme。 登录进去后会让你设置管理员的用户名（Full Name），昵称（Nickname）和邮箱。 接下来设置密码，旧密码即预设密码 changeme。 至此，nginx proxy manager 初始化完成。 使用nginx proxy manager 实现反向代理登录进入主面版，点击 Proxy Hosts 转到反向代理设置界面。 点击 Add Proxy Host，添加一个反向代理。 在 Details 页面，Domain Names 填写你的域名，Scheme 填写反代对象的协议（http&#x2F;https），Forward Hostname&#x2F;IP 填写反代对象的地址，Forward Port 填写反代对象的端口号。 Domain Names - 填写需要反代的域名Scheme - 选择来源的协议Forward Hostname / IP - 填写来源的主机名或IPForward Port - 填写来源的端口Cache Assets - 是否启用缓存Block Common Expoits - 阻止常见的漏洞Websockets Support - 是支援 WebsocketsAccess List - 权限列表选择，可以给反代的网页设置账户密码，验证通过后才能正常打开 如果有 https 加密需求，转到 SSL 页面，将 SSL Certificate 选择为你申请的证书，建议勾选 SSL Force（强制SSL）。 点击保存，在反向代理页面可以看到刚刚设置的反向代理。 测试相应网站，反代成功。 SSL 证书申请HTTP-01 验证方式最简单常规的 SSL 证书申请方式，如果你的主机可以放行 80 端口（如在各大公有云处购买的主机），推荐使用这种方式。我这边没有虚拟主机，家用80端口也被封锁了，所以也没用过这种方式，姑且放在这里给大家参考_(:3」∠)_ 转到反代编辑页面，在 SSL 页面选择 Request a new SSL Certificate，建议勾选 SSL Force（强制SSL），打开勾选 I Agree to the Let’s Encrypt Terms of Service 同意 Let’s Encrypt 相关条款，点击保存。 可以看到反代已自动申请 SSL 证书，可以通过 https 访问了。证书有效期 3 个月，到期会自动续期。 DNS-01 验证方式因为国内 ISP 一般都封锁了 80 端口，所以 HTTP-01 验证方式大概率在家庭自建服务器的情况下不会成功。作为替代，我们可以选择使用 DNS-01 的验证方式来申请 SSL 证书。相较于 HTTP-01，DNS-01 可以申请支持通配符的域名证书，也算弥补了其操作繁琐的缺点。这里以 DNSPOD 和 CloudFlare 为例： DNSPOD1. 申请 api key首先登录 DNSPOD 控制台，在右上角找到 API 密钥 项。 转到 DNSPod Token 页面，点击创建密钥。 设置密钥名称 查看并保存 ID 和 Token 项，这里的内容只会显示一次，一定要保存好。 已经能在总览看到相关 API 已申请成功。 2. 配置 nginx proxy manager 并申请 SSL 证书点击 SSL Certificates，转到 SSL Certificates 页面；再点击右上角 Add SSL Certificate，选择 Let’s Encrypt。 如下图，Domain names 填写自己的域名，Email Address for Let’s Encrypt 填写自己的邮箱。 打开 Use a DNS Challenge，DNS Provider 选择 DNSPod，将 dns_dnspod_email 中的 email@example.com 替换为 DNSPod 的邮箱，dns_dnspod_api_token 中的 id,key 对应填入（即在上一步申请得到的 id 和 token），注意不要删掉英文双引号，且 id 与 token 用英文逗号连接。 12dns_dnspod_email = &quot;email@example.com&quot;dns_dnspod_api_token = &quot;id,key&quot; 勾选 I Agree to the Let’s Encrypt Terms of Service 同意 Let’s Encrypt 相关条款，点击保存。 可以看到 SSL 证书已经申请完成，有效期 3 个月，到期会自动续期。 CloudFlare1. 获取 api key打开个人资料 - API 令牌，找到 API 密钥，查看并复制 Global API Key。 2. 配置 nginx proxy manager 并申请 SSL 证书同上，不过要将申请信息进行替换（初始的只有 api token 的形式申请会有问题）。something@hotmail.com 替换为 cloudflare 的邮箱，0123456789abcdef0123456789abcdef01234567 替换为上面得到的 Global API Key。 123# Cloudflare API tokendns_cloudflare_email = something@hotmail.comdns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234567 附录需要开启 Websockets Support 的应用&#x2F;网站Proxmox VE：不开启会导致 novnc 连接错误jlesage&#x2F;jdownloader-2：不开启会无法进入 webui 管理页面truenas：不开启会导致 webui 无法登录portainer&#x2F;portainer-ce：不开启无法对容器使用 console 参考资料Nginx Proxy Manager验证方式 - Let’s Encrypt【Docker系列】一个反向代理神器——Nginx Proxy Manager【Docker系列】一个反向代理神器——Nginx Proxy Managercertbot dns插件Cannot get Let’s Encrypt cert via cloudflare dns challange使用Docker安裝Nginx-ProxyManager進行SSL反向代理","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"反向代理","slug":"反向代理","permalink":"https://sunjx97.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"name":"SSL","slug":"SSL","permalink":"https://sunjx97.github.io/tags/SSL/"}]},{"title":"Transmission 2.94 升级 3.00 跳过启动校验","slug":"Transmission 2.94 升级 3.00 跳过启动校验","date":"2021-12-18T12:13:22.000Z","updated":"2025-07-09T10:54:42.360Z","comments":true,"path":"posts/402aacbe/","link":"","permalink":"https://sunjx97.github.io/posts/402aacbe/","excerpt":"将 transmission 升级到了 3.00，发现每次启动都会对升级前的旧种子重新校验，然后就是数十个小时的校验过程，实在让人头大。经过多次尝试，终于找到可以跳过启动校验（只校验一次）的方法了，现记录如下。","text":"前言将 transmission 升级到了 3.00，发现每次启动都会对升级前的旧种子重新校验，然后就是数十个小时的校验过程，实在让人头大。经过多次尝试，终于找到可以跳过启动校验（只校验一次）的方法了，现记录如下。 教程transmission 在 3.00 使用 40 位 hash 记录种子文件的信息（之前是 16 位），在 torrents 和 resume 文件夹中新生成的文件都是用 40 位 hash 值命名的。要解决每次启动都重复校验的问题，需要将旧种子的信息更新。主要有以下几步： 等待 transmission 第一次校验完生成新的 40 位 hash 命名的 resume 文件并将旧种子的的 resume 文件删除 将对应的旧种子的 torrent 文件更名为相同的 40 位 hash。 等待初次校验完成 等待校验完成并删除旧 resume 文件（很好分辨，2.94 版本是【种子名 + 前 16 位 hash】的命名方式，而 3.0 版本生成的新 resume 文件都是【40 位 hash】命名方式） 对旧 torrent 文件重命名停止 docker 中的 transmission服务，将旧 torrent 文件重命名为新 40 位 hash 形式。因为旧 torrent 文件名称包含前 16 位 hash，所以可以直接将 16 位 hash 字符串与 resume 文件夹内所有文件进行匹配，如果匹配上前 16 位，则修正命名。 写了段代码解决命名问题： 123456789101112131415161718192021222324252627import osimport retorrents_src = input(&#x27;请输入torrents文件夹绝对路径：&#x27;)resume_src = input(&#x27;请输入resume文件夹绝对路径：&#x27;)torrent_list = os.listdir(torrents_src)resume_list = os.listdir(resume_src)count = 0for torrent in torrent_list: # 从16位hash值开始，到后缀名结束 # 如果是新版文件40位hash，则会截取后16位，在下面match起始位置匹配匹配失败 pattern = torrent[-24:-8] for resume in resume_list: if re.match(pattern, resume[:-7], re.I): print(&#x27;Ok, find the files!&#x27;) print(&#x27;torrent:&#x27;, torrent) print(&#x27;resume:&#x27;, resume) os.rename(torrents_src+&#x27;\\\\&#x27;+torrent, torrents_src+&#x27;\\\\&#x27;+resume[:-7]+&#x27;.torrent&#x27;) print(f&#x27;&#123;torrent&#125; 已更名为 &#123;resume[:-7]&#125;.torrent&#x27;) print(&#x27;==========================&#x27;) count += 1print(f&#x27;已成功命名&#123;count&#125;个种子文件&#x27;) 运行结果如下，一切顺利。 启动 transmission，可以看到已经没有在校验了。 注意事项 在操作前备份好 torrents 和 resume 文件夹 初次校验完成后建议停止 transmission 服务后再操作。 参考资料【原创】Transmission 手动跳过校验 教程.mdMove a half downloaded file from Android to Windows&#x2F;LinuxReinstall Transmission and moving data to avoid torrent recheck","categories":[{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/categories/pt/"}],"tags":[{"name":"transmission","slug":"transmission","permalink":"https://sunjx97.github.io/tags/transmission/"},{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/tags/pt/"}]}],"categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"},{"name":"家庭网络","slug":"家庭网络","permalink":"https://sunjx97.github.io/categories/%E5%AE%B6%E5%BA%AD%E7%BD%91%E7%BB%9C/"},{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/categories/DIY/"},{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/categories/pt/"}],"tags":[{"name":"transmission","slug":"transmission","permalink":"https://sunjx97.github.io/tags/transmission/"},{"name":"docker","slug":"docker","permalink":"https://sunjx97.github.io/tags/docker/"},{"name":"Shadowsocks","slug":"Shadowsocks","permalink":"https://sunjx97.github.io/tags/Shadowsocks/"},{"name":"Openwrt","slug":"Openwrt","permalink":"https://sunjx97.github.io/tags/Openwrt/"},{"name":"ipv6","slug":"ipv6","permalink":"https://sunjx97.github.io/tags/ipv6/"},{"name":"ddns","slug":"ddns","permalink":"https://sunjx97.github.io/tags/ddns/"},{"name":"防火墙","slug":"防火墙","permalink":"https://sunjx97.github.io/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"},{"name":"端口转发","slug":"端口转发","permalink":"https://sunjx97.github.io/tags/%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91/"},{"name":"密码管理","slug":"密码管理","permalink":"https://sunjx97.github.io/tags/%E5%AF%86%E7%A0%81%E7%AE%A1%E7%90%86/"},{"name":"vaultwarden","slug":"vaultwarden","permalink":"https://sunjx97.github.io/tags/vaultwarden/"},{"name":"bitwarden","slug":"bitwarden","permalink":"https://sunjx97.github.io/tags/bitwarden/"},{"name":"光猫","slug":"光猫","permalink":"https://sunjx97.github.io/tags/%E5%85%89%E7%8C%AB/"},{"name":"陕西广电","slug":"陕西广电","permalink":"https://sunjx97.github.io/tags/%E9%99%95%E8%A5%BF%E5%B9%BF%E7%94%B5/"},{"name":"webdav","slug":"webdav","permalink":"https://sunjx97.github.io/tags/webdav/"},{"name":"内网穿透","slug":"内网穿透","permalink":"https://sunjx97.github.io/tags/%E5%86%85%E7%BD%91%E7%A9%BF%E9%80%8F/"},{"name":"frp","slug":"frp","permalink":"https://sunjx97.github.io/tags/frp/"},{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/tags/pt/"},{"name":"smb","slug":"smb","permalink":"https://sunjx97.github.io/tags/smb/"},{"name":"sqlite","slug":"sqlite","permalink":"https://sunjx97.github.io/tags/sqlite/"},{"name":"蜗牛星际","slug":"蜗牛星际","permalink":"https://sunjx97.github.io/tags/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85/"},{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/tags/DIY/"},{"name":"反向代理","slug":"反向代理","permalink":"https://sunjx97.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"name":"SSL","slug":"SSL","permalink":"https://sunjx97.github.io/tags/SSL/"}]}