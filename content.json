{"meta":{"title":"Hexo","subtitle":"","description":"","author":"sunjx97","url":"https://sunjx97.github.io","root":"/"},"pages":[],"posts":[{"title":"蜗牛星际A款机箱的六盘位改造","slug":"蜗牛星际A款机箱的六盘位改造","date":"2022-01-01T12:46:11.000Z","updated":"2022-01-01T13:23:15.854Z","comments":true,"path":"2022/01/01/蜗牛星际A款机箱的六盘位改造/","link":"","permalink":"https://sunjx97.github.io/2022/01/01/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85A%E6%AC%BE%E6%9C%BA%E7%AE%B1%E7%9A%84%E5%85%AD%E7%9B%98%E4%BD%8D%E6%94%B9%E9%80%A0/","excerpt":"","text":"前言距离改造已经过去很久了，直到现在才发出来_(:3」∠)_ 教程因为蜗牛星际A款机箱本来就带一个2.5寸硬盘位（机箱内部），所以只要再扩展出一个2.5寸硬盘位即可。 用到了一个2.5寸硬盘支架，购买链接在这里 使用的螺丝购买链接在这里，建议买短点。 先用四个螺丝将支架和硬盘固定（硬盘有一面有四个螺丝孔），我这边买的螺丝比较长，所以用螺母当垫片使用。 因为螺丝本身有厚度，所以支架最底下那个盘位要空出来，直接在第二个盘位安装2.5寸硬盘即可。 成品如图： 大概只能扩充到2个2.5寸盘位，毕竟离机箱壁太近了。 注意事项机箱内部的2.5寸盘位因为要将4个螺丝孔那面对外，所以对硬盘厚度有要求，建议厚盘装在外面。","categories":[{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/categories/DIY/"}],"tags":[{"name":"蜗牛星际","slug":"蜗牛星际","permalink":"https://sunjx97.github.io/tags/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85/"},{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/tags/DIY/"}]},{"title":"使用docker搭建nginx proxy manager实现反向代理和SSL证书申请","slug":"使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请","date":"2022-01-01T03:12:37.000Z","updated":"2022-01-01T12:49:16.696Z","comments":true,"path":"2022/01/01/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/","link":"","permalink":"https://sunjx97.github.io/2022/01/01/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAnginx-proxy-manager%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8CSSL%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/","excerpt":"","text":"前言自从入坑NAS以来，（黑）群晖一直都是我文件存储管理的得力助手。但随着我的圈内吹水日益熟练学习和理解不断加深，黑裙已不能满足我的需求。如今，是时候告别（黑）群晖，往更专业的自建服务器方向发展了。其中关键的一步，便是找到能方便替换群晖反向代理服务的开源项目，而nginx proxy manager给了我一个很好的选择。 nginx proxy manager介绍nginx proxy manager能让我们轻松地转发到在家里或其他地方运行的网站，包括免费的SSL，而不需要对Nginx或Letsencrypt了解太多。便捷直观的web页面管理和操作无疑大大简化了一般nginx反代服务的步骤。 docker安装nginx proxy manager推荐使用docker-compose安装 12345678910111213141516171819202122232425version: &quot;3&quot;services: app: image: &#x27;jc21/nginx-proxy-manager:latest&#x27; restart: unless-stopped ports: # These ports are in format &lt;host-port&gt;:&lt;container-port&gt; - &#x27;80:80&#x27; # Public HTTP Port - &#x27;443:443&#x27; # Public HTTPS Port - &#x27;81:81&#x27; # Admin Web Port # Add any other Stream port you want to expose # - &#x27;21:21&#x27; # FTP # Uncomment the next line if you uncomment anything in the section # environment: # Uncomment this if you want to change the location of # the SQLite DB file within the container # DB_SQLITE_FILE: &quot;/data/database.sqlite&quot; # Uncomment this if IPv6 is not enabled on your host # DISABLE_IPV6: &#x27;true&#x27; volumes: - ./data:/data - ./letsencrypt:/etc/letsencrypt 浏览器输入【docker主机ip:81】，成功进入web页面，初次登录使用邮箱：&#x61;&#100;&#x6d;&#x69;&#110;&#x40;&#x65;&#120;&#97;&#109;&#x70;&#x6c;&#x65;&#46;&#x63;&#x6f;&#109;，密码：changeme。 登录进去后会让你设置管理员的用户名（Full Name），昵称（Nickname）和邮箱。 接下来设置密码，旧密码即预设密码changeme。 至此，nginx proxy manager初始化完成。 使用nginx proxy manager实现反向代理登录进入主面版，点击Proxy Hosts转到反向代理设置界面。 点击Add Proxy Host，添加一个反向代理。 在Details页面，Domain Names填写你的域名，Scheme填写反代对象的协议（http/https），Forward Hostname/IP填写反代对象的地址，Forward Port填写反代对象的端口号。 如果有https加密需求，转到SSL页面，将SSL Certificate选择为你申请的证书，建议勾选SSL Force（强制SSL）。 点击保存，在反向代理页面可以看到刚刚设置的反向代理。 测试相应网站，反代成功。 SSL证书申请HTTP-01 验证方式最简单常规的SSL证书申请方式，如果你的主机可以放行80端口（如在各大公有云处购买的主机），推荐使用这种方式。我这边没有虚拟主机，家用80端口也被封锁了，所以也没用过这种方式，姑且放在这里给大家参考_(:3」∠)_ 转到反代编辑页面，在SSL页面选择Request a new SSL Certificate，建议勾选SSL Force（强制SSL），打开勾选I Agree to the Let’s Encrypt Terms of Service同意Let’s Encrypt相关条款，点击保存。 可以看到反代已自动申请SSL证书，可以通过https访问了。证书有效期3个月，到期会自动续期。 DNS-01 验证方式因为国内ISP一般都封锁了80端口，所以HTTP-01验证方式大概率在家庭自建服务器的情况下不会成功。作为替代，我们可以选择使用DNS-01的验证方式来申请SSL证书。相较于HTTP-01，DNS-01可以申请支持通配符的域名证书，也算弥补了其操作繁琐的缺点。这里以DNSPOD为例： 1. 申请api key首先登录DNSPOD控制台，在右上角找到 API密钥 项。 转到 DNSPod Token 页面，点击创建密钥。 设置密钥名称 查看并保存ID和Token项，这里的内容只会显示一次，一定要保存好。 已经能在总览看到相关API已申请成功。 2. 配置nginx proxy manager并申请SSL证书点击SSL Certificates，转到SSL Certificates页面；再点击右上角Add SSL Certificate，选择Let’s Encrypt。 如下图，Domain names填写自己的域名，Email Address for Let’s Encrypt填写自己的邮箱。 打开Use a DNS Challenge，DNS Provider选择DNSPod，将dns_dnspod_email中的DNSPOD-API-REQUIRES-A-VALID-EMAIL替换为DNSPod的邮箱，dns_dnspod_api_token中的DNSPOD-API-TOKEN替换为【id,token】的形式（即在上一步申请得到的id和token），注意不要删掉英文双引号，且id与token用英文逗号连接。 勾选I Agree to the Let’s Encrypt Terms of Service同意Let’s Encrypt相关条款，点击保存。 可以看到SSL证书已经申请完成，有效期3个月，到期会自动续期。 参考资料Nginx Proxy Manager验证方式 - Let’s Encrypt【Docker系列】一个反向代理神器——Nginx Proxy Manager【Docker系列】一个反向代理神器——Nginx Proxy Managercertbot dns插件","categories":[{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"}],"tags":[{"name":"反向代理","slug":"反向代理","permalink":"https://sunjx97.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"name":"SSL","slug":"SSL","permalink":"https://sunjx97.github.io/tags/SSL/"}]},{"title":"Transmission 2.94升级3.00 跳过启动校验","slug":"Transmission-2-94升级3-00-跳过启动校验","date":"2021-12-18T12:13:22.000Z","updated":"2022-01-01T05:00:16.641Z","comments":true,"path":"2021/12/18/Transmission-2-94升级3-00-跳过启动校验/","link":"","permalink":"https://sunjx97.github.io/2021/12/18/Transmission-2-94%E5%8D%87%E7%BA%A73-00-%E8%B7%B3%E8%BF%87%E5%90%AF%E5%8A%A8%E6%A0%A1%E9%AA%8C/","excerpt":"","text":"前言将transmission升级到了3.00，发现每次启动都会对升级前的旧种子重新校验，然后就是数十个小时的校验过程，实在让人头大。经过多次尝试，终于找到可以跳过启动校验（只校验一次）的方法了，现记录如下。 教程transmission在3.00使用40位hash记录种子文件的信息（之前是16位），在torrents和resume文件夹中新生成的文件都是用40位hash值命名的。要解决每次启动都重复校验的问题，需要将旧种子的信息更新。主要有以下几步： 等待transmission第一次校验完生成新的40位hash命名的resume文件并将旧种子的的resume文件删除 将对应的旧种子的torrent文件更名为相同的40位hash。 1. 等待初次校验完成 等待校验完成并删除旧resume文件（很好分辨，2.94版本是【种子名+前16位hash】的命名方式，而3.0版本生成的新resume文件都是【40位hash】命名方式） 2. 对旧torrent文件重命名停止docker中的transmission服务，将旧torrent文件重命名为新40位hash形式。因为旧torrent文件名称包含前16位hash，所以可以直接将16位hash字符串与resume文件夹内所有文件进行匹配，如果匹配上前16位，则修正命名。 写了段代码解决命名问题： 123456789101112131415161718192021222324252627import osimport retorrents_src = input(&#x27;请输入torrents文件夹绝对路径：&#x27;)resume_src = input(&#x27;请输入resume文件夹绝对路径：&#x27;)torrent_list = os.listdir(torrents_src)resume_list = os.listdir(resume_src)count = 0for torrent in torrent_list: # 从16位hash值开始，到后缀名结束 # 如果是新版文件40位hash，则会截取后16位，在下面match起始位置匹配匹配失败 pattern = torrent[-24:-8] for resume in resume_list: if re.match(pattern, resume[:-7], re.I): print(&#x27;Ok, find the files!&#x27;) print(&#x27;torrent:&#x27;, torrent) print(&#x27;resume:&#x27;, resume) os.rename(torrents_src+&#x27;\\\\&#x27;+torrent, torrents_src+&#x27;\\\\&#x27;+resume[:-7]+&#x27;.torrent&#x27;) print(f&#x27;&#123;torrent&#125; 已更名为 &#123;resume[:-7]&#125;.torrent&#x27;) print(&#x27;==========================&#x27;) count += 1print(f&#x27;已成功命名&#123;count&#125;个种子文件&#x27;) 运行结果如下，一切顺利。 启动transmission，可以看到已经没有在校验了。 注意事项 在操作前备份好torrents和resume文件夹 初次校验完成后建议停止transmission服务后再操作。 参考资料【原创】Transmission 手动跳过校验 教程.mdMove a half downloaded file from Android to Windows/LinuxReinstall Transmission and moving data to avoid torrent recheck","categories":[{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/categories/pt/"}],"tags":[{"name":"transmission","slug":"transmission","permalink":"https://sunjx97.github.io/tags/transmission/"},{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/tags/pt/"}]}],"categories":[{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/categories/DIY/"},{"name":"selfhosted","slug":"selfhosted","permalink":"https://sunjx97.github.io/categories/selfhosted/"},{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/categories/pt/"}],"tags":[{"name":"蜗牛星际","slug":"蜗牛星际","permalink":"https://sunjx97.github.io/tags/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85/"},{"name":"DIY","slug":"DIY","permalink":"https://sunjx97.github.io/tags/DIY/"},{"name":"反向代理","slug":"反向代理","permalink":"https://sunjx97.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"},{"name":"SSL","slug":"SSL","permalink":"https://sunjx97.github.io/tags/SSL/"},{"name":"transmission","slug":"transmission","permalink":"https://sunjx97.github.io/tags/transmission/"},{"name":"pt","slug":"pt","permalink":"https://sunjx97.github.io/tags/pt/"}]}