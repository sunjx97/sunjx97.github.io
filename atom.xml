<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="https://sunjx97.github.io/atom.xml" rel="self"/>
  
  <link href="https://sunjx97.github.io/"/>
  <updated>2022-01-07T15:40:45.148Z</updated>
  <id>https://sunjx97.github.io/</id>
  
  <author>
    <name>sunjx97</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>解决transmission使用网络共享的监控目录时的监控失灵问题</title>
    <link href="https://sunjx97.github.io/2022/01/07/%E8%A7%A3%E5%86%B3transmission%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB%E7%9A%84%E7%9B%91%E6%8E%A7%E7%9B%AE%E5%BD%95%E6%97%B6%E7%9A%84%E7%9B%91%E6%8E%A7%E5%A4%B1%E7%81%B5%E9%97%AE%E9%A2%98/"/>
    <id>https://sunjx97.github.io/2022/01/07/%E8%A7%A3%E5%86%B3transmission%E4%BD%BF%E7%94%A8%E7%BD%91%E7%BB%9C%E5%85%B1%E4%BA%AB%E7%9A%84%E7%9B%91%E6%8E%A7%E7%9B%AE%E5%BD%95%E6%97%B6%E7%9A%84%E7%9B%91%E6%8E%A7%E5%A4%B1%E7%81%B5%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-07T15:11:08.000Z</published>
    <updated>2022-01-07T15:40:45.148Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>transmission可以通过设置watch监控文件夹来自动添加监控目录内的种子，但如果监控文件夹是smb共享，则会出现失灵的现象（即只在开启或重启时添加一次目录内的种子）。本人使用NAS集中管理自己的数据，docker版transmission也是映射的主机挂载的smb共享文件夹，便出现了日常使用不自动添加种子的问题。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>transmission在Linux下默认使用inotify监控监控目录，而inotify不对cifs共享有效。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在配置文件目录的settings.json加入下行即可。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;watch-dir-force-generic&quot;</span>: <span class="literal">true</span>,</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://forum.transmissionbt.com/viewtopic.php?t=17960">Watch-dir on network folder</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;transmission可以通过设置watch监控文件夹来自动添加监控目录内的种子，但如果监控文件夹是smb共享，则会出现失灵的现象（即只在</summary>
      
    
    
    
    <category term="selfhosted" scheme="https://sunjx97.github.io/categories/selfhosted/"/>
    
    
    <category term="transmission" scheme="https://sunjx97.github.io/tags/transmission/"/>
    
    <category term="pt" scheme="https://sunjx97.github.io/tags/pt/"/>
    
    <category term="smb" scheme="https://sunjx97.github.io/tags/smb/"/>
    
  </entry>
  
  <entry>
    <title>解决通过fstab开机挂载smb文件夹导致的Database is locked问题</title>
    <link href="https://sunjx97.github.io/2022/01/04/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87fstab%E5%BC%80%E6%9C%BA%E6%8C%82%E8%BD%BDsmb%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AF%BC%E8%87%B4%E7%9A%84Database-is-locked%E9%97%AE%E9%A2%98/"/>
    <id>https://sunjx97.github.io/2022/01/04/%E8%A7%A3%E5%86%B3%E9%80%9A%E8%BF%87fstab%E5%BC%80%E6%9C%BA%E6%8C%82%E8%BD%BDsmb%E6%96%87%E4%BB%B6%E5%A4%B9%E5%AF%BC%E8%87%B4%E7%9A%84Database-is-locked%E9%97%AE%E9%A2%98/</id>
    <published>2022-01-04T05:38:54.000Z</published>
    <updated>2022-01-07T15:33:33.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>发现在使用fstab开机挂载的smb文件夹会有Database is locked的问题，如通过docker安装的nginx-proxy-manager和qiandao，映射的文件夹是smb（cifs）共享挂载的，因为默认使用了sqlite的数据库，会导致Database is locked问题，如下图：</p><img src="/images/解决通过fstab开机挂载smb文件夹导致的Database-is-locked问题/sqlite报错 01.png" width="70%" /><img src="/images/解决通过fstab开机挂载smb文件夹导致的Database-is-locked问题/sqlite报错 02.png" /><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>在挂载时加入<b>nolock</b>参数即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">//myserver /mymount cifs username=**,password=**,nolock,uid=1000,gid=1000</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://blog.archiware.com/blog/pure_forum/pure-question-answers/database-is-locked/">Database is locked</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;发现在使用fstab开机挂载的smb文件夹会有Database is locked的问题，如通过docker安装的nginx-proxy-m</summary>
      
    
    
    
    <category term="selfhosted" scheme="https://sunjx97.github.io/categories/selfhosted/"/>
    
    
    <category term="sqlite" scheme="https://sunjx97.github.io/tags/sqlite/"/>
    
    <category term="docker" scheme="https://sunjx97.github.io/tags/docker/"/>
    
    <category term="smb" scheme="https://sunjx97.github.io/tags/smb/"/>
    
  </entry>
  
  <entry>
    <title>蜗牛星际A款机箱的六盘位改造</title>
    <link href="https://sunjx97.github.io/2022/01/01/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85A%E6%AC%BE%E6%9C%BA%E7%AE%B1%E7%9A%84%E5%85%AD%E7%9B%98%E4%BD%8D%E6%94%B9%E9%80%A0/"/>
    <id>https://sunjx97.github.io/2022/01/01/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85A%E6%AC%BE%E6%9C%BA%E7%AE%B1%E7%9A%84%E5%85%AD%E7%9B%98%E4%BD%8D%E6%94%B9%E9%80%A0/</id>
    <published>2022-01-01T12:46:11.000Z</published>
    <updated>2022-01-01T13:30:57.838Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>距离改造已经过去很久了，直到现在才发出来_(:3」∠)_</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>因为蜗牛星际A款机箱本来就带一个2.5寸硬盘位（机箱内部），所以只要再扩展出一个2.5寸硬盘位即可。</p><p>用到了一个2.5寸硬盘支架，购买链接在<a href="https://item.taobao.com/item.htm?id=605572434546">这里</a>，购买半高PCIe款。</p><p>使用的螺丝购买链接在<a href="https://detail.tmall.com/item.htm?id=606010296755">这里</a>，<b>规格为M3</b>，建议买短点。</p><ol><li><p>先用四个螺丝将支架和硬盘固定（硬盘有一面有四个螺丝孔），我这边买的螺丝比较长，所以用螺母当垫片使用。</p><img src="/images/蜗牛星际A款机箱的六盘位改造/增加2.5寸盘位 01.jpg" /></li><li><p>因为螺丝本身有厚度，所以支架最底下那个盘位要空出来，直接在第二个盘位安装2.5寸硬盘即可。</p><img src="/images/蜗牛星际A款机箱的六盘位改造/增加2.5寸盘位 02.jpg" /><img src="/images/蜗牛星际A款机箱的六盘位改造/增加2.5寸盘位 03.jpg" /></li></ol><p>成品如图：<br><img src="/images/蜗牛星际A款机箱的六盘位改造/增加2.5寸盘位 04.jpg" /><br><img src="/images/蜗牛星际A款机箱的六盘位改造/增加2.5寸盘位 05.jpg" /></p><p>大概只能扩充到2个2.5寸盘位，毕竟离机箱壁太近了。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>机箱内部的2.5寸盘位因为要将4个螺丝孔那面对外，所以<b>对硬盘厚度有要求</b>，建议厚盘装在外面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;距离改造已经过去很久了，直到现在才发出来_(:3」∠)_&lt;/p&gt;
&lt;h2 id=&quot;教程&quot;&gt;&lt;a href=&quot;#教程&quot; class=&quot;head</summary>
      
    
    
    
    <category term="DIY" scheme="https://sunjx97.github.io/categories/DIY/"/>
    
    
    <category term="蜗牛星际" scheme="https://sunjx97.github.io/tags/%E8%9C%97%E7%89%9B%E6%98%9F%E9%99%85/"/>
    
    <category term="DIY" scheme="https://sunjx97.github.io/tags/DIY/"/>
    
  </entry>
  
  <entry>
    <title>使用docker搭建nginx proxy manager实现反向代理和SSL证书申请</title>
    <link href="https://sunjx97.github.io/2022/01/01/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAnginx-proxy-manager%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8CSSL%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/"/>
    <id>https://sunjx97.github.io/2022/01/01/%E4%BD%BF%E7%94%A8docker%E6%90%AD%E5%BB%BAnginx-proxy-manager%E5%AE%9E%E7%8E%B0%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%92%8CSSL%E8%AF%81%E4%B9%A6%E7%94%B3%E8%AF%B7/</id>
    <published>2022-01-01T03:12:37.000Z</published>
    <updated>2022-01-23T13:49:55.742Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>自从入坑NAS以来，（黑）群晖一直都是我文件存储管理的得力助手。但随着我的<del>圈内吹水日益熟练</del>学习和理解不断加深，黑裙已不能满足我的需求。如今，是时候告别（黑）群晖，往更专业的自建服务器方向发展了。其中关键的一步，便是找到能方便替换群晖反向代理服务的开源项目，而nginx proxy manager给了我一个很好的选择。</p><h2 id="nginx-proxy-manager介绍"><a href="#nginx-proxy-manager介绍" class="headerlink" title="nginx proxy manager介绍"></a>nginx proxy manager介绍</h2><p>nginx proxy manager能让我们轻松地转发到在家里或其他地方运行的网站，包括免费的SSL，而不需要对Nginx或Letsencrypt了解太多。便捷直观的web页面管理和操作无疑大大简化了一般nginx反代服务的步骤。</p><h2 id="docker安装nginx-proxy-manager"><a href="#docker安装nginx-proxy-manager" class="headerlink" title="docker安装nginx proxy manager"></a>docker安装nginx proxy manager</h2><p>推荐使用docker-compose安装</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">&quot;3&quot;</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">app:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">&#x27;jc21/nginx-proxy-manager:latest&#x27;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="comment"># These ports are in format &lt;host-port&gt;:&lt;container-port&gt;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;80:80&#x27;</span> <span class="comment"># Public HTTP Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;443:443&#x27;</span> <span class="comment"># Public HTTPS Port</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">&#x27;81:81&#x27;</span> <span class="comment"># Admin Web Port</span></span><br><span class="line">      <span class="comment"># Add any other Stream port you want to expose</span></span><br><span class="line">      <span class="comment"># - &#x27;21:21&#x27; # FTP</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Uncomment the next line if you uncomment anything in the section</span></span><br><span class="line">    <span class="comment"># environment:</span></span><br><span class="line">      <span class="comment"># Uncomment this if you want to change the location of </span></span><br><span class="line">      <span class="comment"># the SQLite DB file within the container</span></span><br><span class="line">      <span class="comment"># DB_SQLITE_FILE: &quot;/data/database.sqlite&quot;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Uncomment this if IPv6 is not enabled on your host</span></span><br><span class="line">      <span class="comment"># DISABLE_IPV6: &#x27;true&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./letsencrypt:/etc/letsencrypt</span></span><br></pre></td></tr></table></figure><p>浏览器输入【docker主机ip:81】，成功进入web页面，初次登录使用邮箱：<a href="mailto:&#x61;&#x64;&#x6d;&#105;&#110;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#x6d;">&#x61;&#x64;&#x6d;&#105;&#110;&#x40;&#101;&#x78;&#97;&#x6d;&#x70;&#x6c;&#x65;&#x2e;&#x63;&#x6f;&#x6d;</a>，密码：changeme。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/通过docker安装nginx proxy manager 01.png" /></p><p>登录进去后会让你设置管理员的用户名（Full Name），昵称（Nickname）和邮箱。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/通过docker安装nginx proxy manager 02.png" width="60%" /></p><p>接下来设置密码，旧密码即预设密码changeme。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/通过docker安装nginx proxy manager 03.png" width="60%" /></p><p>至此，nginx proxy manager初始化完成。</p><h2 id="使用nginx-proxy-manager实现反向代理"><a href="#使用nginx-proxy-manager实现反向代理" class="headerlink" title="使用nginx proxy manager实现反向代理"></a>使用nginx proxy manager实现反向代理</h2><p>登录进入主面版，点击Proxy Hosts转到反向代理设置界面。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager反向代理 01.png" /></p><p>点击Add Proxy Host，添加一个反向代理。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager反向代理 02.png" /></p><p>在Details页面，Domain Names填写你的域名，Scheme填写反代对象的协议（http/https），Forward Hostname/IP填写反代对象的地址，Forward Port填写反代对象的端口号。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager反向代理 03.png" width="60%" /></p><p>如果有https加密需求，转到SSL页面，将SSL Certificate选择为你申请的证书，建议勾选SSL Force（强制SSL）。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager反向代理 04.png" width="60%" /></p><p>点击保存，在反向代理页面可以看到刚刚设置的反向代理。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager反向代理 05.png" /></p><p>测试相应网站，反代成功。</p><h2 id="SSL证书申请"><a href="#SSL证书申请" class="headerlink" title="SSL证书申请"></a>SSL证书申请</h2><h3 id="HTTP-01-验证方式"><a href="#HTTP-01-验证方式" class="headerlink" title="HTTP-01 验证方式"></a>HTTP-01 验证方式</h3><p>最简单常规的SSL证书申请方式，如果你的主机可以放行80端口（如在各大公有云处购买的主机），推荐使用这种方式。<del>我这边没有虚拟主机，家用80端口也被封锁了，所以也没用过这种方式，姑且放在这里给大家参考_(:3」∠)_</del></p><p>转到反代编辑页面，在SSL页面选择Request a new SSL Certificate，建议勾选SSL Force（强制SSL），打开勾选I Agree to the Let’s Encrypt Terms of Service同意Let’s Encrypt相关条款，点击保存。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager设置SSL证书 HTTP-01.png" width="60%" /></p><p>可以看到反代已自动申请SSL证书，可以通过https访问了。证书有效期3个月，到期会自动续期。</p><h3 id="DNS-01-验证方式"><a href="#DNS-01-验证方式" class="headerlink" title="DNS-01 验证方式"></a>DNS-01 验证方式</h3><p>因为国内ISP一般都封锁了80端口，所以HTTP-01验证方式大概率在家庭自建服务器的情况下不会成功。作为替代，我们可以选择使用DNS-01的验证方式来申请SSL证书。相较于HTTP-01，DNS-01可以申请<a href="https://letsencrypt.org/zh-cn/docs/challenge-types/">支持通配符的域名证书</a>，也算弥补了其操作繁琐的缺点。这里以DNSPOD和CloudFlare为例：</p><h4 id="·-DNSPOD"><a href="#·-DNSPOD" class="headerlink" title="· DNSPOD"></a>· DNSPOD</h4><h5 id="1-申请api-key"><a href="#1-申请api-key" class="headerlink" title="1. 申请api key"></a>1. 申请api key</h5><p>首先登录DNSPOD控制台，在右上角找到 API密钥 项。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/DNSPOD API申请 01.png" width="50%" /></p><p>转到 DNSPod Token 页面，点击创建密钥。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/DNSPOD API申请 02.png" width="60%" /></p><p>设置密钥名称<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/DNSPOD API申请 03.png" width="60%" /></p><p>查看并保存ID和Token项，这里的内容<b>只会显示一次</b>，一定要保存好。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/DNSPOD API申请 04.png" width="60%" /></p><p>已经能在总览看到相关API已申请成功。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/DNSPOD API申请 05.png" /></p><h5 id="2-配置nginx-proxy-manager并申请SSL证书"><a href="#2-配置nginx-proxy-manager并申请SSL证书" class="headerlink" title="2. 配置nginx proxy manager并申请SSL证书"></a>2. 配置nginx proxy manager并申请SSL证书</h5><p>点击SSL Certificates，转到SSL Certificates页面；再点击右上角Add SSL Certificate，选择Let’s Encrypt。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager设置SSL证书 DNS-01 01.png" /></p><p>如下图，Domain names填写自己的域名，Email Address for Let’s Encrypt填写自己的邮箱。</p><p>打开Use a DNS Challenge，DNS Provider选择DNSPod，将dns_dnspod_email中的<a href="mailto:&#101;&#x6d;&#97;&#105;&#108;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;">&#101;&#x6d;&#97;&#105;&#108;&#x40;&#x65;&#120;&#x61;&#x6d;&#x70;&#x6c;&#101;&#46;&#x63;&#x6f;&#109;</a>替换为DNSPod的邮箱，dns_dnspod_api_token中的id,key对应填入（即在上一步申请得到的id和token），注意不要删掉英文双引号，且id与token用英文逗号连接。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dns_dnspod_email = &quot;email@example.com&quot;</span><br><span class="line">dns_dnspod_api_token = &quot;id,key&quot;</span><br></pre></td></tr></table></figure><p>勾选I Agree to the Let’s Encrypt Terms of Service同意Let’s Encrypt相关条款，点击保存。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager设置SSL证书 DNS-01 02.png" /></p><p>可以看到SSL证书已经申请完成，有效期3个月，到期会自动续期。<br><img src="/images/使用docker搭建nginx-proxy-manager实现反向代理和SSL证书申请/nginx proxy manager设置SSL证书 DNS-01 03.png" /></p><h4 id="·-CloudFlare"><a href="#·-CloudFlare" class="headerlink" title="· CloudFlare"></a>· CloudFlare</h4><h5 id="1-获取api-key"><a href="#1-获取api-key" class="headerlink" title="1. 获取api key"></a>1. 获取api key</h5><p>打开<a href="https://dash.cloudflare.com/profile/api-tokens">个人资料-API令牌</a>，找到<b>API 密钥</b>，查看并复制<b>Global API Key</b>。</p><h5 id="2-配置nginx-proxy-manager并申请SSL证书-1"><a href="#2-配置nginx-proxy-manager并申请SSL证书-1" class="headerlink" title="2. 配置nginx proxy manager并申请SSL证书"></a>2. 配置nginx proxy manager并申请SSL证书</h5><p>同上，不过要将申请信息进行替换（初始的只有api token的形式申请会有问题）。<a href="mailto:&#x73;&#x6f;&#109;&#x65;&#116;&#104;&#105;&#110;&#x67;&#x40;&#104;&#x6f;&#116;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;">&#x73;&#x6f;&#109;&#x65;&#116;&#104;&#105;&#110;&#x67;&#x40;&#104;&#x6f;&#116;&#x6d;&#97;&#x69;&#x6c;&#x2e;&#99;&#111;&#109;</a>替换为cloudflare的邮箱，0123456789abcdef0123456789abcdef01234567替换为上面得到的Global API Key。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Cloudflare API token</span><br><span class="line">dns_cloudflare_email = something@hotmail.com</span><br><span class="line">dns_cloudflare_api_key = 0123456789abcdef0123456789abcdef01234567</span><br></pre></td></tr></table></figure><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="需要开启Websockets-Support的应用-网站"><a href="#需要开启Websockets-Support的应用-网站" class="headerlink" title="需要开启Websockets Support的应用/网站"></a>需要开启Websockets Support的应用/网站</h3><p>Proxmox VE：不开启会导致novnc连接错误<br>jlesage/jdownloader-2：不开启会无法进入webui管理页面<br>truenas：不开启会导致webui无法登录</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://nginxproxymanager.com/guide/#project-goal">Nginx Proxy Manager</a><br><a href="https://letsencrypt.org/zh-cn/docs/challenge-types/">验证方式 - Let’s Encrypt</a><br><a href="https://www.bilibili.com/video/BV1Gg411w7kQ">【Docker系列】一个反向代理神器——Nginx Proxy Manager</a><br><a href="https://blog.laoda.de/archives/nginxproxymanager">【Docker系列】一个反向代理神器——Nginx Proxy Manager</a><br><a href="https://www.jianshu.com/p/659dc904967f">certbot dns插件</a><br><a href="https://github.com/NginxProxyManager/nginx-proxy-manager/issues/680#issuecomment-722016183">Cannot get Let’s Encrypt cert via cloudflare dns challange</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;自从入坑NAS以来，（黑）群晖一直都是我文件存储管理的得力助手。但随着我的&lt;del&gt;圈内吹水日益熟练&lt;/del&gt;学习和理解不断加深，黑裙已不</summary>
      
    
    
    
    <category term="selfhosted" scheme="https://sunjx97.github.io/categories/selfhosted/"/>
    
    
    <category term="反向代理" scheme="https://sunjx97.github.io/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
    <category term="SSL" scheme="https://sunjx97.github.io/tags/SSL/"/>
    
  </entry>
  
  <entry>
    <title>Transmission 2.94升级3.00 跳过启动校验</title>
    <link href="https://sunjx97.github.io/2021/12/18/Transmission-2-94%E5%8D%87%E7%BA%A73-00-%E8%B7%B3%E8%BF%87%E5%90%AF%E5%8A%A8%E6%A0%A1%E9%AA%8C/"/>
    <id>https://sunjx97.github.io/2021/12/18/Transmission-2-94%E5%8D%87%E7%BA%A73-00-%E8%B7%B3%E8%BF%87%E5%90%AF%E5%8A%A8%E6%A0%A1%E9%AA%8C/</id>
    <published>2021-12-18T12:13:22.000Z</published>
    <updated>2022-01-01T05:00:16.641Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>将transmission升级到了3.00，发现每次启动都会对升级前的旧种子重新校验，然后就是数十个小时的校验过程，实在让人头大。经过多次尝试，终于找到可以跳过启动校验（只校验一次）的方法了，现记录如下。</p><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><p>transmission在3.00使用<b>40位hash</b>记录种子文件的信息（之前是16位），在torrents和resume文件夹中新生成的文件都是用40位hash值命名的。要解决每次启动都重复校验的问题，需要将旧种子的信息更新。主要有以下几步：</p><ol><li>等待transmission第一次校验完生成<b>新的40位hash命名的resume文件</b>并将旧种子的的resume文件删除</li><li>将对应的旧种子的torrent文件更名为<b>相同的40位hash</b>。</li></ol><h3 id="1-等待初次校验完成"><a href="#1-等待初次校验完成" class="headerlink" title="1. 等待初次校验完成"></a>1. 等待初次校验完成</h3><!-- ![](/images/resume新旧文件对比.png) --><img src="/images/Transmission-2-94升级3-00-跳过启动校验/resume新旧文件对比.png" width="70%" />等待校验完成并删除旧resume文件（很好分辨，2.94版本是【种子名+前16位hash】的命名方式，而3.0版本生成的新resume文件都是【40位hash】命名方式）<h3 id="2-对旧torrent文件重命名"><a href="#2-对旧torrent文件重命名" class="headerlink" title="2. 对旧torrent文件重命名"></a>2. 对旧torrent文件重命名</h3><p>停止docker中的transmission服务，将旧torrent文件重命名为新40位hash形式。<br>因为旧torrent文件名称包含前16位hash，所以可以直接将16位hash字符串与resume文件夹内所有文件进行匹配，如果匹配上前16位，则修正命名。</p><p>写了段<a href="https://github.com/sunjx97/torrent-file-rename">代码</a>解决命名问题：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">torrents_src = <span class="built_in">input</span>(<span class="string">&#x27;请输入torrents文件夹绝对路径：&#x27;</span>)</span><br><span class="line">resume_src = <span class="built_in">input</span>(<span class="string">&#x27;请输入resume文件夹绝对路径：&#x27;</span>)</span><br><span class="line"></span><br><span class="line">torrent_list = os.listdir(torrents_src)</span><br><span class="line">resume_list = os.listdir(resume_src)</span><br><span class="line"></span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> torrent <span class="keyword">in</span> torrent_list:</span><br><span class="line">    <span class="comment"># 从16位hash值开始，到后缀名结束</span></span><br><span class="line">    <span class="comment"># 如果是新版文件40位hash，则会截取后16位，在下面match起始位置匹配匹配失败</span></span><br><span class="line">    pattern = torrent[-<span class="number">24</span>:-<span class="number">8</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> resume <span class="keyword">in</span> resume_list:</span><br><span class="line">        <span class="keyword">if</span> re.match(pattern, resume[:-<span class="number">7</span>], re.I):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Ok, find the files!&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;torrent:&#x27;</span>, torrent)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;resume:&#x27;</span>, resume)</span><br><span class="line">            os.rename(torrents_src+<span class="string">&#x27;\\&#x27;</span>+torrent, torrents_src+<span class="string">&#x27;\\&#x27;</span>+resume[:-<span class="number">7</span>]+<span class="string">&#x27;.torrent&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;torrent&#125;</span> 已更名为 <span class="subst">&#123;resume[:-<span class="number">7</span>]&#125;</span>.torrent&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;==========================&#x27;</span>)</span><br><span class="line">            count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;已成功命名<span class="subst">&#123;count&#125;</span>个种子文件&#x27;</span>)</span><br></pre></td></tr></table></figure><p>运行结果如下，一切顺利。<br><img src="/images/Transmission-2-94升级3-00-跳过启动校验/torrent更名成功.png" /></p><p>启动transmission，可以看到已经没有在校验了。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>在操作前<b>备份</b>好torrents和resume文件夹</li><li>初次校验完成后建议<b>停止</b>transmission服务后再操作。</li></ol><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://github.com/ylxb2016/PT-help/blob/master/PT%20Tutorial/%E3%80%90%E5%8E%9F%E5%88%9B%E3%80%91Transmission%20%E6%89%8B%E5%8A%A8%E8%B7%B3%E8%BF%87%E6%A0%A1%E9%AA%8C%20%E6%95%99%E7%A8%8B.md">【原创】Transmission 手动跳过校验 教程.md</a><br><a href="https://forum.transmissionbt.com/viewtopic.php?f=2&t=20838&p=80079&hilit=resume&sid=6a23eb2473eab4b32c5df60332c16ae1">Move a half downloaded file from Android to Windows/Linux</a><br><a href="https://forum.transmissionbt.com/viewtopic.php?f=2&t=20694&p=79636&hilit=resume&sid=6a23eb2473eab4b32c5df60332c16ae1#p79636">Reinstall Transmission and moving data to avoid torrent recheck</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;将transmission升级到了3.00，发现每次启动都会对升级前的旧种子重新校验，然后就是数十个小时的校验过程，实在让人头大。经过多次尝</summary>
      
    
    
    
    <category term="pt" scheme="https://sunjx97.github.io/categories/pt/"/>
    
    
    <category term="transmission" scheme="https://sunjx97.github.io/tags/transmission/"/>
    
    <category term="pt" scheme="https://sunjx97.github.io/tags/pt/"/>
    
  </entry>
  
</feed>
